using UnityEngine;
using System.Collections;

public class RedNinjaController : MonoBehaviour {

	public float maxSpeed = 10f;
	bool facingRight = true;
	
	Animator anim;
	
	// Variables used to determine whether or not character is on the ground
	bool grounded = false;
	public Transform groundCheck;
	float groundRadius = 0.2f;
	public LayerMask whatIsGround;
	public float jumpForce = 400f;
	
	// Variabes used to determine whether or not character is clinging to a wall
	bool wallCling = false;
	public Transform wallCheck;
	float wallRadius = 0.4f;
	public LayerMask whatIsWall;

	// Begins to find the animator so the idle animation will begin and so
	// the other animations will be prepared for their eventual use.
	void Start () 
	{
		anim = GetComponent<Animator>();
	}
	
	// Updates with whether or not the character is on the ground and how
	// fast they are moving in order to determine which animation to use,
	// also which direction they face is also determined.
	void FixedUpdate () 
	{
		grounded = Physics2D.OverlapCircle(groundCheck.position, groundRadius, whatIsGround);
		anim.SetBool("Ground", grounded);

		wallCling = Physics2D.OverlapCircle(wallCheck.position, wallRadius, whatIsWall);
		anim.SetBool("Wall", wallCling);

		float move = Input.GetAxis ("Horizontal");		
		anim.SetFloat("Speed", Mathf.Abs(move));
		GetComponent<Rigidbody2D>().velocity = new Vector2(move * maxSpeed, GetComponent<Rigidbody2D>().velocity.y);
		
		if (move > 0 && !facingRight)
		{
			Flip();
		}
		else if(move < 0 && facingRight)
		{
			Flip();
		}
	}
	
	// When the player presses the W key their character should jump once
	// they should not be able to jump again until they touch the ground
	// or cling to a wall.
	void Update()
	{
		if(grounded && Input.GetKeyDown(KeyCode.W))
		{
			anim.SetBool("Ground", false);
			GetComponent<Rigidbody2D>().AddForce(new Vector2(0, jumpForce));
		}
		if(wallCling && Input.GetKeyDown(KeyCode.Space))
		{
			anim.SetBool("Wall", false);
			GetComponent<Rigidbody2D>().AddForce(new Vector2(0, jumpForce));
		}
	}
	
	// This is the function that will flip the character to the
	// direction they are currently moving towards.
	void Flip()
	{
		facingRight = !facingRight;
		Vector3 theScale = transform.localScale;
		theScale.x *= -1;
		transform.localScale = theScale;
	}
}
